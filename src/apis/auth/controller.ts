import { Request, Response } from 'express';

import check_req_body from 'src/helpers/check_req_body';
import error_404 from 'src/middlewares/error_404';
import Service from 'src/apis/auth/services';
import UserService from 'src/apis/users/services';
import serializer from 'src/middlewares/data_serializer';
import error_foreign_key_constraint from 'src/middlewares/error_foreign_key_constraint';
import Hasher from 'src/helpers/hasher';
import error_duplicate_key_constraint from 'src/middlewares/error_duplicate_key_constraint';
import make_response from 'src/helpers/make_response';
import { twilioConfig } from 'src/config';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import crypto from 'crypto';
import twilio from 'twilio';
import { error_invalid_code, error_invalid_to } from 'src/middlewares/error_twilio';


const service = new Service();
const userService = new UserService();
const twilioClient = twilio(twilioConfig.ACCOUNT_SID, twilioConfig.AUTH_TOKEN, {
    lazyLoading: true,
})


dotenv.config();


// Create and Save a new user
export const signup = async (req: Request, res: Response) => {
    // Validate request
    if (!check_req_body(req, res)) return;

    let data = req.body;

    const result = serializer(data, {
        email: 'not_null, email',
        contact: 'number, optional',
        password: 'not_null, min_length=8, max_length=20',
        role_id: 'integer',
    });

    if (result.error) {
        res.status(400).send(result);
        return;
    }
    data = result.result;

    if (data.contact !== undefined) {
        const contactExist = await service.getUser("contact", data.contact);

        if (contactExist) {
            res.send(make_response(true, "Duplicate entry on contact!"));
            return;
        }
    }

    const password = Hasher.hash(data.password)
    data["password"] = password.hash;
    data["salt"] = password.salt;
    data["image"] = "iVBORw0KGgoAAAANSUhEUgAABAAAAAQACAYAAAB/HSuDAAAgAElEQVR4nOzdaW8b2ZXG8aduLSySohZvnQwmg0YwE+TFAPP9v8J8gQSDJJ2k3e1FtmRxq71qXji3fFkitVm2yKr/DxBkiRTNdttV95x7zrnexcVFIwAAAAAA0Gvmqd8AAAAAAAD49kgAAAAAAAAwACQAAAAAAAAYABIAAAAAAAAMAAkAAAAAAAAGgAQAAAAAAAADQAIAAAAAAIABIAEAAAAAAMAAkAAAAAAAAGAASAAAAAAAADAAJAAAAAAAABgAEgAAAAAAAAwACQAAAAAAAAaABAAAAAAAAANAAgAAAAAAgAEgAQAAAAAAwACQAAAAAAAAYABIAAAAAAAAMAAkAAAAAAAAGAASAAAAAAAADAAJAAAAAAAABoAEAAAAAAAAA0ACAAAAAACAASABAAAAAADAAJAAAAAAAABgAEgAAAAAAAAwACQAAAAAAAAYABIAAAAAAAAMAAkAAAAAAAAGgAQAAAAAAAADQAIAAAAAAIABIAEAAAAAAMAAkAAAAAAAAGAASAAAAAAAADAAJAAAAAAAABgAEgAAAAAAAAwACQAAAAAAAAaABAAAAAAAAANAAgAAAAAAgAEgAQAAAAAAwACQAAAAAAAAYABIAAAAAAAAMAAkAAAAAAAAGAASAAAAAAAADAAJAAAAAAAABoAEAAAAAAAAA0ACAAAAAACAASABAAAAAADAAJAAAAAAAABgAEgAAAAAAAAwACQAAAAAAAAYABIAAAAAAAAMQPDUbwAAgEPjed69Hne/vumxx9A0zb0f737vtte47/MAAMB+IAEAAHgybgC5LRDuBph3CZa7r2m/fsxA+y4B823PuUvwfJ8A2/3vu8t/87bHdj3/rn92j53MAAAAj4sEAADgYNgA0xijuq4fdQe6u0vfDWbt79U0zdYP+36qqtr4XJalJKkoiq3Ps1+7/y3213VdX3t/2/6b7WPun0/3+8YYeZ4n3/fbryXJ9/";
    data["image"] += "";
    data["image"] += "";
    data["image"] += "NRhvDmNyTAAAAeAxhGOr58+eazWbyfb89fQYA9hlXKgC9Y3f/d1UBUBkAALivbjLZVpxx8gyAQ0ICAECvuKcAhGFIWSYA4NGFYajxeKwXL15oOp0+9dsBgDsjAQCgN+zuTLcCoFv+TzsAAOAh7P3DnTfD8D8Ah4QEAIDesOcvj0YjxXGsyWSiMAyZAQAAeBQ2yTybzXR0dKTZbKYoitrHAGDfcQoAgF6xfZie5zGUCQDw6GyrWRAE1yrN3AoBANhHJAAA9E4QBIqiSJPJRGVZtt/f1g4AAMB9GGN0cnKio6MjhWHYVp9xfwFwCNgaA9A7tkTT7tBIBP8AgK9ne/7d+wsAHBKuXAB6yRij6XSqNE1pAwAAfDVb7h8EgabTqeI4vvY4AOw7VsUAeqdpGhljFMexRqMRswAAAF/FlvgHQaAwDBXHcTtkFgAOCStiAL3hDmOyFQB2kUYCAADwtcIwVBiGGo/HiqKI3n8AB4cVMYBeaJpGdV23w5jsDIAoijQejxUEQfsYAAD3Ye8f9r5iK8u4pwA4NCQAAPSS7dMMw7BtA2CnBgDwNcIwlO/711rL6P8HcChIAADoLTsH4PT09NqwJgAA7sPzPE2nU02n0zYJYJFcBnAoOAUAQC90d1/sUU1BECiOY45rAgB8tSiKFARBW/5P4A/g0FABAKBX7IKsrmtVVaUwDPXs2TMdHx8rjmP5vs8sAADAndh7ik0qj8fjaxVlJAIAHBISAAB6zQ4DtOWa9GkCAO7LnjJz27Gy3GMA7DsSAAB6xV181XUt3/c1Ho91dnamH374QXEcUwEAALgXO1R2MpkojuOtu/62+oz7C4B9RgIAQO9smwdgd27cxyjbBADcxr1P2PvJtu8BwCFgKhaAXrKLMft5NpspCAKl/8/enTW3kVxpH38qs7KqUFi4ierut23PeLbv/1HmasIzE9H22I52txZuMncbwAAAIABJREFUWGt/LxRZXSgCJCVRJJb/L4JBiSDQ6AslMs85ec5qpdVqpbIs23udAABs4g/6URTJOafxeNx+bvQDyHyeANgHVAAAOHjdBk70AgAAfA7/GdKvIAOAfUQFAICD0y3P9N/jOFaSJLq4uFDTNHr37p1Wq9Vrvk0AwI7rVgD4PgDd62MEkwHsGyoAABycTY2ZPOec4jiWtXbrc8nsAAC8pmnaCjJJ9JIBsNeoAABwMPqNmTY9PplMFEWRrq6utFwuX/DdAQD2waZS/yRJ5Jxb6y/D4R/APqICAMDBeGgj5sczWWsVRZGSJFGSJJI+jQsEAGAb55ycc+3fN33e+IAAQQEAu4wKAABHo2kaxXGsOI51cnIiSfr1119VVRUbNgDAVt0KAHoAANhnVAAAODpBEGg4HGoymSgMQxnDUggA+KSbyfcH/G4FAId+APuMXS+Ao+LHAY5GI52fn8s5144F7H4BACB9+tyIokjOORljtn5G8BkCYB9wBQDAUfG9AOI4lnNOo9FI1lrd3NyoaZqt0wEAAMfDl/j7CrEwDBWGbJsB7D9WMgBHp2kaRVEkSRoMBpKk6+tr+gAAANb4jL61di1ATJYfwL7iCgCAo + RnOp + dneni4qLtBUAHZwCA / yzwmX / fA4DPCAD7jgoAAEfJ9wKI47i900lGBwDQZYxpA8Y0jAVwCAgAADhKTdOoqipNJhPVda3hcKiiKLRYLCRR3gkAx8xn+n2jWP+9ruvXfmsA8FUIAAA4Sn68k7 / ";
    data["image"] += "";
    data["image"] += "";
    data["image"] += "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";
    try {
        const insert = await userService.create(data);
        res.send(make_response(false, insert));
    } catch (e) {
        if (!error_foreign_key_constraint(res, e, service.get_prisma())) return;
        if (!error_duplicate_key_constraint(res, e, service.get_prisma())) return;
        res.status(500).send("Cloudflare 504");
        if (process.env.DEBUG) console.log(e);
    }
}


export const signin = async (req: Request, res: Response) => {
    // Validate request
    if (!check_req_body(req, res)) return;

    let data = req.body;

    const result = serializer(data, {
        username: 'not_null, or=[email | number]',
        code_challenge: "not_null",
        code_challenge_method: "not_null",
        password: 'not_null',
    });

    if (result.error) {
        res.status(400).send(result);
        return;
    }

    data = result.result;

    try {
        let user = null;
        let valid = false;

        user = await service.getUser("email", data.username); console.log(user);
        if (!user) user = await service.getUser("contact", data.username);

        if (!error_404(user, res)) return;

        // if (user?.desable) {
        //     res.send(make_response(true, "Account desabled!"));
        //     return;
        // }

        valid = Hasher.validate_hash(data.password, String(user?.password), String(user?.salt));

        if (!valid) {
            res.send(make_response(true, "Incorect credentials !"));
            return;
        }

        const expireIn = user?.desable ? (Date.now() + (3 * 60 * 1000)) : user?.two_fa ? (Date.now() + (3 * 60 * 1000)) : (Date.now() + 78000);
        const scope = user?.desable ? "email_verification" : user?.two_fa ? "2fa" : "access_token";
        const JWTSecret = user?.desable ? String(process.env.JWT_EMAIL_VERIFICATION_SECRET_KEY) : user?.two_fa ? String(process.env.JWT_2FA_SECRET_KEY) : String(process.env.JWT_AUTH_CODE_SECRET_KEY);
        const encryptSecret = user?.desable ? String(process.env.EMAIL_VERIFICATION_ENCRYPT_KEY) : user?.two_fa ? String(process.env.TWO_FA_ENCRYPT_KEY) : String(process.env.AUTH_CODE_ENCRYPT_KEY);

        const token = jwt.sign(
            {
                user_id: user?.id,
                tenant: user?.role_id,
                two_fa: user?.two_fa,
                code_challenge: data.code_challenge,
                code_challenge_method: data.code_challenge_method,
                exp: expireIn,
            },
            JWTSecret
        );

        const authCode = Hasher.encrypt(token, encryptSecret);

        res.send(make_response(false, { authorization_code: authCode, scope: scope }));
    } catch (e) {
        if (!error_404(e, res)) return;
        if (process.env.DEBUG) console.log(e);
    }
}


export const getAccessToken = async (req: Request, res: Response) => {
    // Validate request
    if (!check_req_body(req, res)) return;

    let data = req.body;

    const result = serializer(data, {
        authorization_code: 'not_null',
        code_verifier: "not_null",
    });

    if (result.error) {
        res.status(400).send(result);
        return;
    }

    data = result.result;

    try {
        const token = Hasher.decrypt(data.authorization_code, String(process.env.AUTH_CODE_ENCRYPT_KEY));
        const payload = jwt.verify(token, String(process.env.JWT_AUTH_CODE_SECRET_KEY));

        if (typeof payload !== "string") {
            if (payload.exp)
                if (Date.now() >= payload.exp) {
                    res.status(401).send(make_response(true, "Authorization code expired!"));
                    return;
                }

            const hash = crypto
                .createHash(String(payload.code_challenge_method))
                .update(data.code_verifier)
                .digest('base64url');

            if (hash !== payload.code_challenge) {
                res.status(401).send(make_response(true, "Unauthorized!"));
                return;
            }

            const access_token = jwt.sign(
                {
                    user_id: payload.user_id,
                    tenant: payload.tenant,
                    exp: Date.now() + (30 * 60 * 1000),
                },
                String(process.env.JWT_ACCESS_TOKEN_SECRET_KEY)
            );

            const refresh_token = jwt.sign(
                {
                    user_id: payload.user_id,
                    tenant: payload.tenant,
                    exp: Date.now() + (24 * 3600 * 1000),
                },
                String(process.env.JWT_REFRESH_TOKEN_SECRET_KEY)
            );

            res.send(make_response(false, {
                token_type: "Bearer",
                access_token: access_token,
                refresh_token: Hasher.encrypt(refresh_token, String(process.env.REFRESH_TOKEN_ENCRYPT_KEY)),
            }));
        } else {
            res.status(401).send(make_response(true, "Unauthorized!"));
        }
    } catch (e) {
        res.status(401).send(make_response(true, "Unauthorized!"));
        if (process.env.DEBUG) console.log(e);
    }
}


export const refreshAccessToken = async (req: Request, res: Response) => {
    // Validate request
    if (!check_req_body(req, res)) return;

    let data = req.body;

    const result = serializer(data, {
        refresh_token: 'not_null',
    });

    if (result.error) {
        res.status(400).send(result);
        return;
    }

    data = result.result;

    try {
        const refresh_token = Hasher.decrypt(data.refresh_token, String(process.env.REFRESH_TOKEN_ENCRYPT_KEY));
        const payload = jwt.verify(refresh_token, String(process.env.JWT_REFRESH_TOKEN_SECRET_KEY));

        if (typeof payload !== "string") {
            if (payload.exp)
                if (Date.now() >= payload.exp) {
                    res.status(401).send(make_response(true, "Token expired!"));
                    return;
                }

            const access_token = jwt.sign(
                {
                    user_id: payload.user_id,
                    tenant: payload.tenant,
                    exp: Date.now() + (30 * 60 * 1000),
                },
                String(process.env.JWT_ACCESS_TOKEN_SECRET_KEY)
            );

            res.send(make_response(false, {
                token_type: "Bearer",
                access_token: access_token,
                refresh_token: data.refresh_token,
            }));
        } else {
            res.status(401).send(make_response(true, "Unauthorized!"));
        }
    } catch (e) {
        res.status(401).send(make_response(true, "Unauthorized!"));
        if (process.env.DEBUG) console.log(e);
    }
};


// Send a  sms: we got user_id and channel like email , sms, voice or totp
export const twoFAVerify = async (req: Request, res: Response) => {
    // Validate request
    if (!check_req_body(req, res)) return;

    let data = req.body;

    const result = serializer(data, {
        channel: 'not_null, like=[email | sms | totp | voice | whatsapp]',
        authorization_code: "not_null",
        code_verifier: "not_null",
    });

    if (result.error) {
        res.status(400).send(result);
        return;
    }

    data = result.result

    try {
        const token = Hasher.decrypt(data.authorization_code, String(process.env.TWO_FA_ENCRYPT_KEY));
        const payload = jwt.verify(token, String(process.env.JWT_2FA_SECRET_KEY));

        if (typeof payload !== "string") {
            if (payload.exp)
                if (Date.now() >= payload.exp) {
                    res.status(401).send(make_response(true, "Unauthorized!"));
                    return;
                }
            // console.log(payload);


            const hash = crypto
                .createHash(String(payload.code_challenge_method))
                .update(data.code_verifier)
                .digest('base64url');

            if (hash !== payload.code_challenge) {
                res.status(401).send(make_response(true, "Unauthorized!"));
                return;
            }

            const user = await service.retriveUser({
                id: Number(payload.user_id),
                selectedItems: { contact_verified: true }
            });

            if (!error_404(user, res)) return;

            const channel = data.channel;

            let to = user?.email;

            if (channel !== "email") {
                // @ts-ignore
                if (user?.contact_verified) to = user?.contact;
                else {
                    res.send(make_response(true, "Make sure your contact is verified or use another channel!"));
                    return;
                }
            }

            await twilioClient.verify.v2.services(twilioConfig.SERVICE_ID)
                .verifications
                .create({ to: String(to), channel: channel })
                .then(verification => {
                    // console.log(verification.status, verification);
                    const token = jwt.sign(
                        {
                            user_id: payload.user_id,
                            tenant: payload.tenant,
                            to: to,
                            code_challenge: payload.code_challenge,
                            code_challenge_method: payload.code_challenge_method,
                            exp: Date.now() + (10 * 60 * 1000),
                        },
                        String(process.env.JWT_2FA_SECRET_KEY)
                    );

                    const authCode = Hasher.encrypt(token, String(process.env.CHECK_TWO_FA_ENCRYPT_KEY));

                    res.status(200).send(make_response(false, { authorization_code: authCode, scope: "2fa" }));
                })
                .catch(e => {
                    if (!error_invalid_to(res, e)) return;
                    console.log(e);
                });
        } else {
            res.status(401).send(make_response(true, "Unauthorized!"));
        }
    } catch (e) {
        // if (!error_foreign_key_constraint(res, e, service.get_prisma())) return;
        // if (!error_duplicate_key_constraint(res, e, service.get_prisma())) return;
        res.status(401).send(make_response(true, "Unauthorized!"));
        if (process.env.DEBUG) console.log(e);
    }
}


// Validate token: we got token, user_id
export const twoFACheck = async (req: Request, res: Response) => {
    // Validate request
    if (!check_req_body(req, res)) return;

    let data = req.body;

    const result = serializer(data, {
        code: 'not_null, number',
        authorization_code: "not_null",
        code_verifier: "not_null",
    });

    if (result.error) {
        res.status(400).send(result);
        return;
    }

    data = result.result

    try {
        const token = Hasher.decrypt(data.authorization_code, String(process.env.CHECK_TWO_FA_ENCRYPT_KEY));
        const payload = jwt.verify(token, String(process.env.JWT_2FA_SECRET_KEY));

        if (typeof payload !== "string") {
            if (payload.exp)
                if (Date.now() >= payload.exp) {
                    res.status(401).send(make_response(true, "Authorization code expired!"));
                    return;
                }

            const hash = crypto
                .createHash(String(payload.code_challenge_method))
                .update(data.code_verifier)
                .digest('base64url');

            if (hash !== payload.code_challenge) {
                res.status(401).send(make_response(true, "Unauthorized! code"));
                return;
            }

            await twilioClient.verify.v2.services(twilioConfig.SERVICE_ID)
                .verificationChecks
                .create({ to: String(payload.to), code: data.code })
                .then(verificationCheck => {
                    // console.log(verificationCheck.status, verificationCheck);
                    if (verificationCheck.status === "approved") {
                        const access_token = jwt.sign(
                            {
                                user_id: payload.user_id,
                                tenant: payload.tenant,
                                exp: Date.now() + (30 * 60 * 1000),
                            },
                            String(process.env.JWT_ACCESS_TOKEN_SECRET_KEY)
                        );

                        const refresh_token = jwt.sign(
                            {
                                user_id: payload.user_id,
                                tenant: payload.tenant,
                                exp: Date.now() + (24 * 3600 * 1000),
                            },
                            String(process.env.JWT_REFRESH_TOKEN_SECRET_KEY)
                        );

                        res.send(make_response(false, {
                            token_type: "Bearer",
                            access_token: access_token,
                            refresh_token: Hasher.encrypt(refresh_token, String(process.env.REFRESH_TOKEN_ENCRYPT_KEY)),
                        }));
                    }
                    else res.status(401).send(make_response(true, "Unauthorized! not approved"));
                })
                .catch(e => {
                    if (!error_invalid_code(res, e)) return;
                    if (!error_invalid_to(res, e)) return;
                    console.log(e);

                });
        } else {
            res.status(401).send(make_response(true, "Unauthorized! payload"));
        }

    } catch (e) {
        // if (!error_foreign_key_constraint(res, e, service.get_prisma())) return;
        // if (!error_duplicate_key_constraint(res, e, service.get_prisma())) return;
        res.status(401).send(make_response(true, "Unauthorized! catch"));
        if (process.env.DEBUG) console.log(e);
    }
}


// Send a  sms: we got user_id and channel like email , sms, voice or totp
export const verifyUserInfo = async (req: Request, res: Response) => {
    // Validate request
    if (!check_req_body(req, res)) return;

    let data = req.body;

    const result = serializer(data, {
        channel: 'not_null, like=[email | sms | totp | voice | whatsapp]',
        authorization_code: "not_null, optional",
        code_verifier: "not_null, optional",
        user_id: "not_null, integer, optional",
    });

    if (result.error) {
        res.status(400).send(result);
        return;
    }

    data = result.result

    try {
        const channel = data.channel;
        let newPayload: { [x: string]: any };
        let user = null;

        if (channel === "email") {
            const token = Hasher.decrypt(data.authorization_code, String(process.env.EMAIL_VERIFICATION_ENCRYPT_KEY));
            const payload = jwt.verify(token, String(process.env.JWT_EMAIL_VERIFICATION_SECRET_KEY));

            const resolveScope = async () => {
                const response: {
                    bool: boolean,
                    newPayload: {},
                    user: { email: string, contact: string } | null
                } = { bool: true, newPayload: {}, user: null };

                if (typeof payload !== "string") {
                    if (payload.exp)
                        if (Date.now() >= payload.exp) {
                            res.status(401).send(make_response(true, "Authorization code expired!"));
                            response.bool = false;
                        }
                    // console.log(payload);


                    const hash = crypto
                        .createHash(String(payload.code_challenge_method))
                        .update(data.code_verifier)
                        .digest('base64url');

                    if (hash !== payload.code_challenge) {
                        res.status(401).send(make_response(true, "Unauthorized!"));
                        response.bool = false;
                    }

                    user = await service.retriveUser({ id: Number(payload.user_id), whereClause: {} });
                    // const user_2 = await service.retriveUser(Number(13), {});
                    console.log("resolver user:", user);
                    // console.log("resolver user_2:", user_2);


                    response.newPayload = {
                        user_id: payload.user_id,
                        tenant: payload.tenant,
                        channel: channel,
                        code_challenge: payload.code_challenge,
                        code_challenge_method: payload.code_challenge_method,
                    }
                    response.user = user

                } else {
                    res.status(401).send(make_response(true, "Unauthorized!"));
                    response.bool = false;
                }

                return response;
            }

            const resolver = await resolveScope();
            console.log("resolver:", resolver);


            if (!resolver.bool) return;

            user = resolver.user;
            newPayload = resolver.newPayload;
        } else {
            user = await service.retriveUser({ id: Number(data.user_id) });

            newPayload = {
                user_id: data.user_id,
                channel: channel,
            }
        }

        if (!error_404(user, res, "merde")) return;


        const to = channel == "email" ? user?.email : user?.contact;
        newPayload["to"] = to;
        newPayload["exp"] = Date.now() + (10 * 60 * 1000),

            await twilioClient.verify.v2.services(twilioConfig.SERVICE_ID)
                .verifications
                .create({ to: String(to), channel: channel })
                .then(verification => {
                    // console.log(verification.status, verification);
                    const token = jwt.sign(
                        newPayload,
                        String(process.env.JWT_EMAIL_VERIFICATION_SECRET_KEY)
                    );

                    const authCode = Hasher.encrypt(token, String(process.env.EMAIL_VERIFICATION_ENCRYPT_KEY));

                    res.status(200).send(make_response(false, { authorization_code: authCode, scope: "email_verification" }));
                })
                .catch(e => {
                    if (!error_invalid_to(res, e)) return;
                    res.status(500).send(make_response(true, "Internal server error!"))
                    console.log(e);
                });


    } catch (e) {
        // if (!error_foreign_key_constraint(res, e, service.get_prisma())) return;
        // if (!error_duplicate_key_constraint(res, e, service.get_prisma())) return;
        res.status(401).send(make_response(true, "Unauthorized!"));
        if (process.env.DEBUG) console.log(e);
    }
}


// Validate token: we got token, user_id
export const checkVerification = async (req: Request, res: Response) => {
    // Validate request
    if (!check_req_body(req, res)) return;

    let data = req.body;

    const result = serializer(data, {
        code: 'not_null, number',
        authorization_code: "not_null",
        code_verifier: "not_null, optional",
    });

    if (result.error) {
        res.status(400).send(result);
        return;
    }

    data = result.result

    try {
        const token = Hasher.decrypt(data.authorization_code, String(process.env.EMAIL_VERIFICATION_ENCRYPT_KEY));
        const payload = jwt.verify(token, String(process.env.JWT_EMAIL_VERIFICATION_SECRET_KEY));

        if (typeof payload !== "string") {
            if (payload.exp)
                if (Date.now() >= payload.exp) {
                    res.status(401).send(make_response(true, "Authorization code expired!"));
                    return;
                }

            let response: {} | string;

            if (payload.channel == "email") {
                const hash = crypto
                    .createHash(String(payload.code_challenge_method))
                    .update(data.code_verifier)
                    .digest('base64url');

                if (hash !== payload.code_challenge) {
                    res.status(401).send(make_response(true, "Unauthorized!"));
                    return;
                }

                const access_token = jwt.sign(
                    {
                        user_id: payload.user_id,
                        tenant: payload.tenant,
                        exp: Date.now() + (30 * 60 * 1000),
                    },
                    String(process.env.JWT_ACCESS_TOKEN_SECRET_KEY)
                );

                const refresh_token = jwt.sign(
                    {
                        user_id: payload.user_id,
                        tenant: payload.tenant,
                        exp: Date.now() + (24 * 3600 * 1000),
                    },
                    String(process.env.JWT_REFRESH_TOKEN_SECRET_KEY)
                );

                response = {
                    token_type: "Bearer",
                    access_token: access_token,
                    refresh_token: Hasher.encrypt(refresh_token, String(process.env.REFRESH_TOKEN_ENCRYPT_KEY)),
                }
            } else response = "Verified!";

            await twilioClient.verify.v2.services(twilioConfig.SERVICE_ID)
                .verificationChecks
                .create({ to: String(payload.to), code: data.code })
                .then(async verificationCheck => {
                    // console.log(verificationCheck.status, verificationCheck);
                    if (verificationCheck.status === "approved") {
                        const data: any = payload.channel == "email" ? { desable: false } : { contact_verified: true };

                        await userService.update(payload.user_id, data);
                        res.send(make_response(false, response));
                    }
                    else res.status(401).send(make_response(true, "Unauthorized!"));
                })
                .catch(e => {
                    if (!error_invalid_code(res, e)) return;
                    if (!error_invalid_to(res, e)) return;
                    console.log(e);

                });
        } else {
            res.status(401).send(make_response(true, "Unauthorized!"));
        }

    } catch (e) {
        // if (!error_foreign_key_constraint(res, e, service.get_prisma())) return;
        // if (!error_duplicate_key_constraint(res, e, service.get_prisma())) return;
        res.status(401).send(make_response(true, "Unauthorized!"));
        if (process.env.DEBUG) console.log(e);
    }
}


export const resetPasswordVerify = async (req: Request, res: Response) => {
    // Validate request
    if (!check_req_body(req, res)) return;

    let data = req.body;

    const result = serializer(data, {
        channel: 'not_null, like=[email]',
        email: "not_null",
    });

    if (result.error) {
        res.status(400).send(result);
        return;
    }

    data = result.result


    // if (!data.email || !data.contact) {
    //     res.status(400).send(make_response(true, "Email or Contact must be given !"));
    //     return;
    // }


    try {
        const channel = data.channel;
        let user: { id: number } | null;

        if (channel == "email")
            user = await userService.getUser({ email: data.email });
        else
            user = await userService.getUser({ contact: data.contact });

        if (!error_404(user, res)) return;

        const to = channel == "email" ? data.email : data.contact;

        await twilioClient.verify.v2.services(twilioConfig.SERVICE_ID)
            .verifications
            .create({ to: String(to), channel: channel })
            .then(verification => {
                // console.log(verification.status, verification);
                const token = jwt.sign(
                    {
                        user_id: user?.id,
                        to: to,
                        exp: Date.now() + (10 * 60 * 1000),
                    },
                    String(process.env.JWT_RESET_PASSWORD_SECRET_KEY)
                );

                const authCode = Hasher.encrypt(token, String(process.env.RESET_PASSWORD_ENCRYPT_KEY));

                res.status(200).send(make_response(false, { authorization_code: authCode, scope: "reset_password" }));
            })
            .catch(e => {
                if (!error_invalid_to(res, e)) return;
                // console.log(e);
                res.status(500).send(make_response(true, "Uncknow error!"));
                if (process.env.DEBUG) console.log(e);
            });
    } catch (e) {
        // if (!error_foreign_key_constraint(res, e, service.get_prisma())) return;
        // if (!error_duplicate_key_constraint(res, e, service.get_prisma())) return;
        res.status(401).send(make_response(true, "Unauthorized!"));
        if (process.env.DEBUG) console.log(e);
    }
}


export const resetPasswordReset = async (req: Request, res: Response) => {
    // Validate request
    if (!check_req_body(req, res)) return;

    let data = req.body;

    const result = serializer(data, {
        code: "not_null, number",
        authorization_code: 'not_null',
    });

    if (result.error) {
        res.status(400).send(result);
        return;
    }

    data = result.result;

    try {
        const token = Hasher.decrypt(data.authorization_code, String(process.env.RESET_PASSWORD_ENCRYPT_KEY));
        const payload = jwt.verify(token, String(process.env.JWT_RESET_PASSWORD_SECRET_KEY));

        if (typeof payload !== "string") {
            if (payload.exp)
                if (Date.now() >= payload.exp) {
                    res.status(401).send(make_response(true, "Authorization code expired!"));
                    return;
                }


            await twilioClient.verify.v2.services(twilioConfig.SERVICE_ID)
                .verificationChecks
                .create({ to: String(payload.to), code: data.code })
                .then(async verificationCheck => {
                    // console.log(verificationCheck.status, verificationCheck);
                    if (verificationCheck.status === "approved") {
                        const newPassword = Hasher.generate_salt(null, 16).hexString;
                        const password = Hasher.hash(newPassword)
                        data["password"] = password.hash;
                        data["salt"] = password.salt;
                        delete data["code"], delete data["authorization_code"];
                        await userService.update(Number(payload.user_id), data);

                        res.send(make_response(false, { password: newPassword }));
                    }
                    else res.status(401).send(make_response(true, "Unauthorized!"));
                })
                .catch(e => {
                    if (!error_invalid_code(res, e)) return;
                    if (!error_invalid_to(res, e)) return;
                    if (process.env.DEBUG) console.log(e);
                });
        } else {
            res.status(401).send(make_response(true, "Unauthorized!"));
        }
    } catch (e) {
        res.status(401).send(make_response(true, "Unauthorized!"));
        if (process.env.DEBUG) console.log(e);
    }
}



