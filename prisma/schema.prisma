// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("DEV_DATABASE_URL")
  // url      = env("DEV_DATABASE_URL")
}
// 
model Tenant {
  id           Int     @id @default(autoincrement())
  name         String
  email        String?
  email2       String?
  description  String?
  profilePhoto String? @db.LongText()

  // lender
  address                 String?
  preferredLoanCategories String?

  // borrower
  phone          String?
  phone2         String?
  businessSector String?

  // community
  type        String?
  website     String?
  socialMedia String?

  accountType             AccountType?    @relation(fields: [accountTypeId], references: [id])
  accountTypeId           Int
  roles                   Role[]
  receivedTransactions    Transaction[]   @relation(name: "receivedTransaction")
  transactionsSent        Transaction[]   @relation(name: "transactionSent")
  deleted                 Boolean         @default(false)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime?       @updatedAt
  projects                Project[]
  investments             Investment[]
  // wallet                  Wallet[]
  invitationsSent         Invitation[]    @relation(name: "invitationSent")
  userTenant              UserTenant[]
  userTenantOnAttribution UserTenant[]    @relation(name: "userTenantOnAttribution")
  rooms                   Room[]
  PaymentMethod           PaymentMethod[]

  @@unique([name, email])
  @@map("tenant")
}

model AccountType {
  id                       Int                     @id @default(autoincrement())
  name                     String                  @unique
  codename                 String                  @unique
  description              String?
  restricted               Boolean                 @default(false) // if true, the associated account will only be accessible by invitation
  tenants                  Tenant[]
  accountsTypesRoles       AccountTypeRole[]
  accountsTypesPermissions AccountTypePermission[]
  createdAt                DateTime                @default(now())
  updatedAt                DateTime?               @updatedAt

  @@map("accounttype")
}

model User {
  id               Int                @id @default(autoincrement())
  firstName        String?
  lastName         String?
  email            String             @unique
  phone            String?            @unique
  phone2           String?            @unique
  password         String
  emailVerified    Boolean            @default(false)
  phoneVerified    Boolean            @default(false)
  phone2Verified   Boolean            @default(false)
  accountActivated Boolean            @default(false)
  deleted          Boolean            @default(false)
  usersTenants     UserTenant[]
  usersPermissions UsersPermissions[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  userRoom         UserRoom[]
  messages         Message[]
  UserRole         UserRole[]

  @@map("user")
}

model UserTenant {
  id           Int       @id @default(autoincrement())
  userId       Int
  user         User      @relation(fields: [userId], references: [id])
  tenantId     Int
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
  userTenantId Int?
  userTenant   Tenant?   @relation(fields: [userTenantId], references: [id], name: "userTenantOnAttribution")
  role         Role      @relation(fields: [roleId], references: [id])
  roleId       Int
  manager      Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@unique([userId, tenantId, roleId])
  @@map("usertenant")
}

model Role {
  id                 Int               @id @default(autoincrement())
  name               String
  description        String?
  published          Boolean           @default(false)
  tenant             Tenant?           @relation(fields: [owner], references: [id])
  owner              Int?
  accountsTypesRoles AccountTypeRole[]
  usersTenants       UserTenant[]
  permissionRole     PermissionRole[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime?         @updatedAt
  Invitation         Invitation[]
  // InvitationRole     InvitationRole[]
  UserRole           UserRole[]

  @@unique([name, owner])
  @@map("role")
}

model Permission {
  id                       Int                     @id @default(autoincrement())
  name                     String
  description              String?
  codename                 String                  @unique
  accountsTypesPermissions AccountTypePermission[]
  permissionRole           PermissionRole[]
  createdAt                DateTime                @default(now())
  updatedAt                DateTime?               @updatedAt
  usersPermissions         UsersPermissions[]

  @@map("permission")
}

model PermissionRole {
  id           Int        @id @default(autoincrement())
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  roleId       Int
  role         Role       @relation(fields: [roleId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt

  @@unique([permissionId, roleId])
  @@map("permissionrole")
}

model AccountTypeRole {
  id            Int         @id @default(autoincrement())
  roleId        Int
  role          Role        @relation(fields: [roleId], references: [id])
  accountTypeId Int
  accountType   AccountType @relation(fields: [accountTypeId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt

  @@unique([accountTypeId, roleId])
  @@map("accounttyperole")
}

model AccountTypePermission {
  id            Int         @id @default(autoincrement())
  permissionId  Int
  permission    Permission  @relation(fields: [permissionId], references: [id])
  accountTypeId Int
  accountType   AccountType @relation(fields: [accountTypeId], references: [id])
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @updatedAt

  @@unique([accountTypeId, permissionId])
  @@map("accounttypepermission")
}

model UserRole {
  id        Int       @id @default(autoincrement())
  roleId    Int
  roles     Role      @relation(fields: [roleId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, roleId])
  @@map("userrole")
}

model UsersPermissions {
  id           Int        @id @default(autoincrement())
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  userId       Int
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt

  @@unique([userId, permissionId])
  @@map("userspermissions")
}

model Project {
  id                     Int          @id @default(autoincrement())
  projectTitle           String
  impactImage            String       @db.LongText()
  carouselImage          String?      @db.LongText()
  teaserTitle            String
  amountRequested        Float
  projectCountry         String
  story                  String?      @db.Text()
  loanApplicationSpecial String @db.Text()
  loanInformation        String? @db.Text()
  docs                   String       @db.LongText()
  tenant                 Tenant       @relation(fields: [owner], references: [id])
  owner                  Int
  investments            Investment[]
  disabled               Boolean      @default(true)
  treat                  Boolean      @default(false)
  deleted                Boolean      @default(false)
  createdAt              DateTime     @default(now())
  updatedAt              DateTime?    @updatedAt

  @@map("project")
}

model Investment {
  id             Int            @id @default(autoincrement())
  amount         Float
  Project        Project        @relation(fields: [projectId], references: [id])
  projectId      Int
  tenant         Tenant         @relation(fields: [funder], references: [id])
  funder         Int
  investmentTerm InvestmentTerm @relation(fields: [term], references: [id])
  term           Int
  dueAmount      Float
  dueGain        Float
  collectionDate DateTime
  gainCollected  Boolean        @default(false)
  done           Boolean        @default(false) // the investment is done (true) when the transaction is accepted therefore in status 1
  transactionId  String         @unique
  transaction    Transaction    @relation(fields: [transactionId], references: [transactionId])
  createdAt      DateTime       @default(now())
  updatedAt      DateTime?      @updatedAt

  @@map("investment")
}

model InvestmentTerm {
  id          Int          @id @default(autoincrement())
  term        Int
  benefit     Int
  name        String?
  description String?
  investment  Investment[]
  disabled    Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime?    @updatedAt

  @@unique([term, benefit])
  @@map("investmentterm")
}

// model Wallet {
//   id            Int             @id @default(autoincrement())
//   balance       Float           @default(0.0)
//   tenant        Tenant          @relation(fields: [owner], references: [id])
//   owner         Int             @unique
//   paymentMethod PaymentMethod[]
//   createdAt     DateTime        @default(now())
//   updatedAt     DateTime?       @updatedAt
// }

model PaymentMethod {
  id                        Int               @id @default(autoincrement())
  paymentMethodType         PaymentMethodType @relation(fields: [paymentMethodTypeCodename], references: [codename], onUpdate: Cascade)
  paymentMethodTypeCodename String
  disabled                  Boolean           @default(false)
  deleted                   Boolean           @default(false)
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime?         @updatedAt
  // Wallet                    Wallet?           @relation(fields: [walletId], references: [id])
  // walletId                  Int?
  // CrC Cinetpay
  owner                     Int
  tenants                   Tenant            @relation(fields: [owner], references: [id])
  customerName              String?
  customerSurname           String?
  customerEmail             String?
  customerPhoneNumber       String? // MM Cinetpay
  customerAddress           String?
  customerCity              String?
  customerCountry           String?
  customerState             String?
  customerZipCode           String?
  // CC
  address                   String?

  @@map("paymentmethod")
}

model PaymentMethodType {
  id            Int             @id @default(autoincrement())
  name          String
  codename      String          @unique // CLFW: Cool Lion Finance Wallet | MM: Mobile Money | CrC: Credit Card | CC: Crypto Currency
  PaymentMethod PaymentMethod[]
  disabled      Boolean         @default(false)
  deleted       Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
  Transaction   Transaction[]

  @@map("paymentmethodtype")
}

// model AcceptedCurrencies {
//   id            Int             @id @default(autoincrement())
//   name          String?
//   codename      String
//   PaymentMethod PaymentMethod[]
//   Transaction   Transaction[]
//   disabled      Boolean         @default(false)
//   deleted       Boolean         @default(false)
//   createdAt     DateTime        @default(now())
//   updatedAt     DateTime?       @updatedAt
// }

model Transaction {
  id                        Int               @id @default(autoincrement())
  paymentMethodTypeCodename String
  paymentMethodType         PaymentMethodType @relation(fields: [paymentMethodTypeCodename], references: [codename])
  amount                    Float
  // acceptedCurrencies AcceptedCurrencies @relation(fields: [currencyId], references: [id])
  // currencyId         Int
  recipientTenant           Tenant            @relation(fields: [recipient], references: [id], name: "receivedTransaction")
  recipient                 Int
  senderTenant              Tenant            @relation(fields: [sender], references: [id], name: "transactionSent")
  sender                    Int
  reason                    String?
  currency                  String
  transactionId             String            @unique
  status                    Int
  createdAt                 DateTime          @default(now())
  updatedAt                 DateTime?         @updatedAt
  // MM Cinetpay
  operator                  String?
  // CrC Cinetpay
  customerName              String?
  customerSurname           String?
  customerEmail             String?
  customerPhoneNumber       String? // MM Cinetpay
  customerAddress           String?
  customerCity              String?
  customerCountry           String?
  customerState             String?
  customerZipCode           String?
  // CC
  address                   String?
  Investment                Investment?

  @@map("transaction")
}

model Invitation {
  id            Int       @id @default(autoincrement())
  senderTenant  Tenant    @relation(fields: [sender], references: [id], name: "invitationSent")
  sender        Int
  receiverEmail String
  role          Role      @relation(fields: [roleId], references: [id])
  roleId        Int
  confirm       Boolean   @default(false)
  deleted       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  // InvitationRole InvitationRole[]

  @@map("invitation")
}

// model InvitationRole {
//   id           Int        @id @default(autoincrement())
//   roleId       Int
//   role         Role       @relation(fields: [roleId], references: [id])
//   invitationId Int
//   invitation   Invitation @relation(fields: [invitationId], references: [id])
//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime?  @updatedAt

//   @@unique([invitationId, roleId])
// }

// model Message {
//   id        Int       @id @default(autoincrement())
//   sender    Int?
//   type      String // info | chat
//   chatId  Str
//   createdAt DateTime  @default(now())
//   updatedAt DateTime? @updatedAt
// }

model Room {
  id        Int        @id @default(autoincrement())
  name      String
  host      Int
  tenant    Tenant     @relation(fields: [host], references: [id], onUpdate: Cascade)
  uuid      String     @unique
  // owner    Int?
  // tenant   Tenant?    @relation(fields: [owner], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  messages  Message[]
  userRoom  UserRoom[]

  @@map("room")
}

model UserRoom {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  roomId    Int
  room      Room      @relation(fields: [roomId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@unique([userId, roomId])
  @@map("userroom")
}

model Message {
  id        Int       @id @default(autoincrement())
  content   String
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  room      Room      @relation(fields: [roomId], references: [id])
  roomId    Int
  replyTo   Int?
  message   Message?  @relation(fields: [replyTo], references: [id], name: "replyTo")
  deleted   Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  messages  Message[] @relation(name: "replyTo")

  @@map("message")
}

// TODO: view message notification entity
