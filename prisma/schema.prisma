// npx prisma migrate dev --create-only
// npx prisma migrate deploy
// npx prisma generate

generator client {
  provider = "prisma-client-js"
  // provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model users {
  id               Int      @id @default(autoincrement())
  first_name       String   @default("Undefined")
  last_name        String   @default("Undefined")
  email            String   @unique
  contact          String   @default("Undefined")
  image            String   @db.Text
  about_me         String   @default("Undefined")
  localisation     String   @db.Text
  loan_reason      String   @default("Undefined")
  newsletter       Boolean  @default(false)
  password         String   @db.Text
  salt             String   @db.Text
  contact_verified Boolean  @default(false)
  desable          Boolean  @default(true)
  two_fa           Boolean  @default(false)
  is_deleted       Boolean  @default(false)
  created_at       DateTime @default(now())
  updated_at       DateTime @updatedAt

  role_id   Int?
  user_docs users_docs[]
  role      role?        @relation(fields: [role_id], references: [id])
  companies company[]
  wallet    wallet?

  @@map("users")
}

model users_docs {
  id         Int      @id @default(autoincrement())
  name       String
  path       String   @db.Text
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id Int
  user    users @relation(fields: [user_id], references: [id])

  @@map("users_docs")
}

model role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  users       users[]
  permissions roleToPermission[]

  @@map("role")
}

model permissions {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String
  is_deleted  Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  roles roleToPermission[]

  @@map("permissions")
}

model roleToPermission {
  role          role        @relation(fields: [role_id], references: [id])
  role_id       Int // relation scalar field (used in the `@relation` attribute above)
  permission    permissions @relation(fields: [permission_id], references: [id])
  permission_id Int // relation scalar field (used in the `@relation` attribute above)
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  @@id([role_id, permission_id])
}

model company {
  id                  Int    @id @default(autoincrement())
  name                String
  description         String @db.Text
  logo                String @db.Text
  localisation        String @db.Text
  phone               String
  email               String
  domain              String
  website             String
  payment_information String @default("")
  about_me            String @db.Text

  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  manager_id Int
  manager    users   @relation(fields: [manager_id], references: [id])
  offers     offer[]

  @@unique([name, phone])
  @@unique([name, email])
  @@map("company")
}

model wallet {
  id         Int      @id @default(autoincrement())
  amount     Float
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user_id      Int           @unique
  user         users         @relation(fields: [user_id], references: [id])
  investments  investment[]
  transactions transaction[]

  @@map("wallet")
}

model offer {
  id                      Int      @id @default(autoincrement())
  name                    String
  // summary                 String  
  // description             String   @db.Text
  image                   String   @db.Text
  localisation            String   @db.Text
  category                String
  stroy                   String
  investment_motive       String   @db.Text
  loan_about              String   @db.Text
  about_friendship_bridge String   @db.Text
  loan_length             DateTime
  interest_rate           Float
  start_date              DateTime
  end_date                DateTime
  disbursed_date          DateTime
  // repayment_schedule      String

  total_investment_to_raise Float
  funds_to_raise            Float @default(0.0)
  price_per_unit            Float    @default(0.0)
  number_of_unit            Float    @default(0.0)
  maximum_amount            Float    @default(0.0)
  minimum_amount            Float
  // investment_term           DateTime @db.Timestamp(0)
  distribution_frequency    Int
  // start_payment             DateTime @db.Date
  expected_return           Float
  status                    String   @default("")
  is_deleted                Boolean  @default(false)
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt

  company_id            Int
  company               company                @relation(fields: [company_id], references: [id])
  offer_docs            offer_docs[]
  investment            investment[]
  offer_repayment_plans offer_repayment_plan[]

  @@map("offer")
}

model offer_docs {
  id         Int      @id @default(autoincrement())
  docs       String   @db.Text
  is_deleted Boolean  @default(false)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  offer_id Int   @unique
  offer    offer @relation(fields: [offer_id], references: [id])

  @@map("offer_docs")
}

model investment {
  id                        Int      @id @default(autoincrement())
  amount                    Float
  amount_with_interest_rate Float    @default(0.0)
  is_deleted                Boolean  @default(false)
  created_at                DateTime @default(now())
  updated_at                DateTime @updatedAt

  offer_id  Int
  offer     offer?  @relation(fields: [offer_id], references: [id])
  wallet_id Int
  wallet    wallet? @relation(fields: [wallet_id], references: [id])

  @@map("investment")
}

model transaction {
  id             Int      @id @default(autoincrement())
  amount         Float    @default(0)
  type           String
  status         String   @default("pending")
  is_deleted     Boolean  @default(false)
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  currency       String   @db.VarChar(10)
  service        String   @db.VarChar(30)
  transaction_id String   @unique(map: "transaction_id") @db.VarChar(255)
  method         String   @default("unknown") @db.VarChar(25)

  wallet_id Int
  wallet    wallet? @relation(fields: [wallet_id], references: [id])

  @@map("transaction")
}

model offer_repayment_plan {
  id              Int      @id @default(autoincrement())
  date            DateTime
  expected_amount Float
  received_amount Float
  status          String
  is_deleted      Boolean  @default(false)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  offer_id Int
  offer    offer? @relation(fields: [offer_id], references: [id])

  @@map("offer_repayment_plan")
}

model variable {
  id    Int    @id @default(autoincrement())
  name  String
  value String
}
